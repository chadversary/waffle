#!/bin/bash

: ${wfl_debug:=0}
if [[ "${#wfl_debug}" -gt 0 && "$wfl_debug" != 0 ]]; then
    set -vx
fi

set -o errexit
set -o nounset
set -o pipefail

declare -r prog="${0##*/}"

function wfl_print_opt_spec {
    cat <<-EOF
	$prog [-h|--help] <args>
	--
	  Required Arguments
	t,tag=tag           The git tag to release.

	  Optional Arguments
	h,help              Show this help message.
	o,out-dir=out-dir   Default is current directory.
	from=email          The value for the From: header. Defaults to "user.name <user.email>" from git-config.
	cc=email            Add a Cc: header. May occur multiple times.
	S,gpg-key=keyid     Specify non-default GPG signing key.
	gpg-opt=opt         Pass <opt> to gpg(1). May occur multiple times.
	EOF
}

function wfl_print_release_email_header {
    cat <<-EOF
	Subject: [ANNOUNCE] Waffle $wfl_rel_version
	From: $arg_from
	To: waffle@lists.freedesktop.org
	EOF

    if [[ ${#arg_cc[@]} -gt 0 ]]; then
        printf 'Cc: %s\n' "${arg_cc[@]}"
    fi
}

function wfl_print_release_email_body_common {
    cat <<-EOF
	Tarballs and other release files are published at"

	    ${wfl_src_tar_xz_url}  SHA-256 ${wfl_src_tar_xz_sha256}"
	    ${wfl_src_tar_sign_url}"
	    ${wfl_armored_sha256sums_url}"

	The signed git tag '${wfl_rel_tag}' is published in "

	    git://github.com/waffle-gl/waffle"
	    http://github.com/waffle-gl/waffle"
	    https://github.com/waffle-gl/waffle"

	You can verify the release files by:"

	    Verifying the tarball's signature:"
	    xz -d ${wfl_src_tar_xz_basename} | gpg --verify ${wfl_src_tar_sign_basename}"

	    Verifying the tag's signature:"
	    git tag --verify ${wfl_rel_tag}"

	    Verifying the tarball's checksum (least secure method):"
	    echo '${wfl_src_tar_xz_sha256}  ${wfl_src_tar_xz_basename}' | sha256sum -c"
	    "
	Please file bugs and other issues at"

	    https://github.com/waffle-gl/waffle/issues"

	You can view the commit history for this release at"

	    https://github.com/waffle-gl/waffle/commits/refs/tags/${wfl_rel_tag}"

	You can track the release status at"

	    https://github.com/waffle-gl/waffle/milestones"
	EOF
}

function wfl_print_rc_release_email_{
    echo "A release candidate Waffle ${wfl_rel_version} is now available for testing."
    echo
    wfl_print_release_email_body_common
}

function wfl_print_feature_release_email {
    echo "The feature release Waffle ${wfl_rel_version} is now available."
    echo
    wfl_print_release_email_body_common
}

function wfl_print_maintenance_release_email {
    local prev_version="${wfl_rel_major_version}.${wfl_rel_minor_version}.$((wfl_rel_patch_version - 1))"

    cat <<-EOF
	A maintenance release Waffle ${wfl_rel_version} is now available. This
	release fixes issues since Waffle ${prev_version}.

	EOF

    wfl_print_release_email_body_common
}

function wfl_git {
    git --git-dir="$wfl_git_dir" "$@"
}

function wfl_gpg {
    local gpg_cmd=(gpg2 --digest-algo SHA256)

    if [[ -v arg_keyid ]]; then
        gpg_cmd+=(--default-key "$arg_keyid")
    fi

    if [[ ${#arg_gpg_opt[@]} -gt 0 ]]; then
        gpg_cmd+=("${arg_gpg_opt[@]}")
    fi

    "${gpg_cmd[@]}" "$@"
}

function die {
    printf '%s: error' "$prog"
    if [[ $# -gt 0 ]]; then
        printf ': %s' "$@"
    fi
    printf '\n'

    exit 1
}

function usage_error {
    echo "usage error: $@"
    parse_args --help
}

function parse_args {
    arg_cc=('')
    arg_gpg_opt=('')

    eval "$(wfl_print_opt_spec | git rev-parse --parseopt -- "$@" || echo "exit $?")"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --)
                shift
                break
                ;;
            --cc)
                arg_cc+=("$2")
                shift 2
                ;;
            -t|--tag)
                if [[ -v arg_tag ]]; then
                    usage_error 'multiple occurences of argument <tag>'
                fi
                arg_tag="$2"
                shift 2
                ;;
            --from)
                if [[ -v arg_from ]]; then
                    usage_error 'multiple occurences of argument <from>'
                fi
                arg_from="$2"
                shift 2
                ;;
            --gpg-opt)
                arg_gpg_opt+=("$2")
                shift 2
                ;;
            -S|--gpg-key)
                if [[ -v arg_keyid ]]; then
                    usage_error 'multiple occurences of argument <keyid>'
                fi
                arg_keyid="$2"
                shift 2
                ;;
            -o|--out-dir)
                if [[ -v arg_out_dir ]]; then
                    usage_error 'multiple occurences of argument <out-dir>'
                fi
                arg_out_dir="$2"
                shift 2
                ;;
            *)
                internal_error
                ;;
        esac
    done

    if [[ $# -gt 0 ]]; then
        usage_error "trailing args: $@"
    fi

    if [[ ! -v arg_tag ]]; then
        usage_error "missing required argument <tag>"
    fi

    if ! [[ "$arg_tag" =~ v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+(-rc[[:digit:]]+)?$ ]]; then
        usage_error "argument tag='$arg_tag' does not look like a version tag"
    fi

    if [[ -v arg_from ]]; then
        :
    elif [[ -v wfl_git_user_name && -v wfl_git_user_email ]]; then
        arg_from="$wfl_git_user_name <$wfl_git_user_email>"
    elif [[ -v wfl_git_user_email ]]; then
        arg_from="$wfl_git_user_email"
    elif [[ -v EMAIL ]]; then
        arg_from="$EMAIL"
    else
        usage_error 'if argument <from> is missing, then either user.email' \
                    'in the git config or the environment variable EMAIL' \
                    'must be set'
    fi

    # Remove dummy head elements.
    arg_cc=("${arg_cc[@]:1}")
    arg_gpg_opt=("${arg_gpg_opt[@]:1}")

    : ${arg_out_dir:=$(pwd)}
}


function wfl_make_rel_files {
    wfl_git archive \
        --output="$wfl_src_tar_path" \
        --prefix="$wfl_rel_name/" \
        "$wfl_rel_tag"
    wfl_gpg --armor --detach-sign "$wfl_src_tar_path"
    xz --keep "$wfl_src_tar_path" > "$wfl_src_tar_xz_path"

    wfl_src_tar_xz_sha256="$(sha256sum "$wfl_src_tar_xz_path" | cut -f 1 -d ' ')"
    echo "$wfl_src_tar_xz_sha256  $wfl_src_tar_xz_basename" > "$wfl_sha256sums_path"
    wfl_gpg --armor "$wfl_sha256sums_path" > "$wfl_armored_sha256sums_path"
}

# Git info
wfl_git_dir="$(git rev-parse --git-dir)"
wfl_git_work_tree="$(wfl_git rev-parse --show-toplevel)"
wfl_git_user_name="$(wfl_git config user.name)" || unset wfl_git_user_name
wfl_git_user_email="$(wfl_git config user.email)" || unset wfl_git_user_email

parse_args "$@"

# Release strings
wfl_rel_tag="$arg_tag"
wfl_rel_version="${wfl_rel_tag#v}"
wfl_rel_version_stable_part="${wfl_rel_version%-*}"
wfl_rel_name="waffle-${wfl_rel_version}"
wfl_rel_notes_path="$wfl_git_work_tree/doc/release-notes/waffle-${wfl_rel_version_stable_part}.txt"
IFS='.' read -r wfl_rel_major_version \
                wfl_rel_minor_version \
                wfl_rel_patch_version <<< "$wfl_rel_version"

# Release files, basenames.
wfl_src_tar_basename="${wfl_rel_name}.tar"
wfl_src_tar_sign_basename="${wfl_src_tar_basename}.asc"
wfl_src_tar_xz_basename="${wfl_src_tar_basename}.xz"
wfl_sha256sums_basename="${wfl_rel_name}.sha256sums"
wfl_armored_sha256sums_basename="${wfl_sha256sums_basename}.asc"
wfl_rel_email_basename="${wfl_rel_name}.eml"

# Release files, full paths.
wfl_src_tar_path="$arg_out_dir/$wfl_src_tar_basename"
wfl_src_tar_xz_path="$arg_out_dir/$wfl_src_tar_xz_basename"
wfl_src_tar_sign_path="$arg_out_dir/$wfl_src_tar_sign_basename"
wfl_sha256sums_path="$arg_out_dir/$wfl_sha256sums_basename"
wfl_armored_sha256sums_path="$arg_out_dir/$wfl_armored_sha256sums_basename"
wfl_rel_email_path="$arg_out_dir/$wfl_rel_email_basename"

# Release urls
wfl_rel_base_url="http://www.waffle-gl.org/files/release/${wfl_rel_name}"
wfl_src_tar_xz_url="${wfl_rel_base_url}/${wfl_src_tar_xz_basename}"
wfl_src_tar_sign_url="${wfl_rel_base_url}/${wfl_src_tar_sign_basename}"
wfl_rel_email_url="${wfl_rel_base_url}/${wfl_rel_email_basename}"
wfl_sha256sums_url="${wfl_rel_base_url}/${wfl_sha256sums_basename}"

function cmd_make-release-files {
    wfl_make_rel_files
}

function cmd_push-release-files {
    wfl_push_rel_files
}
