#!/bin/bash

: ${wfl_debug:=0}
if [[ "${#wfl_debug}" -gt 0 && "$wfl_debug" != 0 ]]; then
    set -vx
fi

set -o errexit
set -o nounset
set -o pipefail

declare -r prog="${0##*/}"

declare -r opt_spec="\
$prog [-h|--help] <args>
--
  Required Arguments
t,tag=tag           The git tag to release.

  Optional Arguments
h,help              Show this help message.
o,out-dir=out-dir   Default is current directory.
from=email          The value for the From: header. Defaults to \"user.name <user.email>\" from git-config.
cc=email            Add a Cc: header. May occur multiple times.
S,gpg-key=keyid     Specify non-default GPG signing key.
gpg-opt=opt         Pass <opt> to gpg(1). May occur multiple times.
"

declare -r wfl_rel_email_common_template="\
Tarballs and other release files are found at

    %{wfl_src_tar_xz_url}  SHA-256 %{wfl_src_tar_xz_sha256}
    %{wfl_src_tar_sign_url}
    %{wfl_sha256sums_url}

The signed git tag '%{wfl_rel_tag}' is published in 

    git://github.com/waffle-gl/waffle
    http://github.com/waffle-gl/waffle
    https://github.com/waffle-gl/waffle

Commit history for this release can be viewed at

    https://github.com/waffle-gl/waffle/commits/refs/tags/%{wfl_rel_tag}

Please file bugs and other issues at

    https://github.com/waffle-gl/waffle/issues

You can track the release status at

    https://github.com/waffle-gl/waffle/milestones
"

readonly wfl_release_email_rc_template="\
A release candidate Waffle %{wfl_rel_version} is now available for testing.

$wfl_release_email_common_template
"

readonly wfl_release_email_rc_template="\
A release candidate Waffle %{wfl_rel_version} is now available for testing.

$wfl_release_email_common_template
"

readonly wfl_release_email_major_template="\
The feature release Waffle %{wfl_rel_version} is now available.

$wfl_release_email_common_template
"

readonly wfl_release_email_maint_template="\
The maintenance release Waffle %{wfl_rel_version} is now available.

$wfl_release_email_common_template
"

function die {
    printf '%s: error' "$prog"
    if [[ $# -ne 0 ]]; then
        printf ': %s' "$@"
    fi
    printf '\n'

    exit 1
}

function usage_error {
    echo "usage error: $@"
    parse_args --help
}

function parse_args {
    arg_cc=('')
    arg_gpg_opt=('')

    eval "$(echo "$opt_spec" | git rev-parse --parseopt -- "$@" || echo "exit $?")"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --)
                shift
                break
                ;;
            --cc)
                arg_cc+=("$2")
                shift 2
                ;;
            -t|--tag)
                if [[ -v arg_tag ]]; then
                    usage_error 'multiple occurences of argument <tag>'
                fi
                arg_tag="$2"
                shift 2
                ;;
            --from)
                if [[ -v arg_from ]]; then
                    usage_error 'multiple occurences of argument <from>'
                fi
                arg_from="$2"
                shift 2
                ;;
            --gpg-opt)
                arg_gpg_opt+=("$2")
                shift 2
                ;;
            -S|--gpg-key)
                if [[ -v arg_keyid ]]; then
                    usage_error 'multiple occurences of argument <keyid>'
                fi
                arg_keyid="$2"
                shift 2
                ;;
            -o|--out-dir)
                if [[ -v arg_out_dir ]]; then
                    usage_error 'multiple occurences of argument <out-dir>'
                fi
                arg_out_dir="$2"
                shift 2
                ;;
            *)
                internal_error
                ;;
        esac
    done

    if [[ $# -ne 0 ]]; then
        usage_error "trailing args: $@"
    fi

    if [[ ! -v arg_tag ]]; then
        usage_error "missing required argument <tag>"
    fi

    if ! [[ "$arg_tag" =~ v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+(-rc[[:digit:]]+)?$ ]]; then
        usage_error "argument tag='$arg_tag' does not look like a version tag"
    fi

    if [[ -v arg_from ]]; then
        :
    elif [[ -v wfl_git_user_name && -v wfl_git_user_email ]]; then
        arg_from="$wfl_git_user_name <$wfl_git_user_email>"
    elif [[ -v wfl_git_user_email ]]; then
        arg_from="$wfl_git_user_email"
    elif [[ -v EMAIL ]]; then
        arg_from="$EMAIL"
    else
        usage_error 'if argument <from> is missing, then either user.email' \
                    'in the git config or the environment variable EMAIL' \
                    'must be set'
    fi

    # Remove dummy head elements.
    arg_cc=("${arg_cc[@]:1}")
    arg_gpg_opt=("${arg_gpg_opt[@]:1}")

    printf "XXX%sXXX\n" "${arg_cc[@]}"

    : ${arg_out_dir:=$(pwd)}
}

function wfl_git {
    git --git-dir="$wfl_git_dir" "$@"
}

function wfl_gpg {
    local gpg_cmd=(gpg2 --digest-algo SHA256)

    if [[ -v arg_keyid ]]; then
        gpg_cmd+=(--default-key "$arg_keyid")
    fi
    if [[ ${#arg_gpg_opt[@]} -ne 0 ]]; then
        gpg_cmd+=("${arg_gpg_opt[@]}")
    fi

    "${gpg_cmd[@]}" "$@"
}

function wfl_make_rel_files {
# Release files
wfl_src_archive_prefix="${wfl_rel_name}/"
wfl_src_tar_xz_basename="${wfl_rel_name}.tar.xz"
wfl_src_tar_xz_sig_basename="${wfl_src_tar_xz_basename}.asc"
wfl_announce_basename="${wfl_rel_name}.eml"
wfl_sha256sums_basename="${wfl_rel_name}.sha256sums"

# Release urls
wfl_rel_base_url="http://www.waffle-gl.org/files/release/${wfl_rel_name}"
wfl_src_tar_xz_url="${wfl_rel_base_url}/${wfl_src_tar_xz_basename}"
wfl_src_tar_xz_sig_url="${wfl_src_tar_xz_url}.sig"
wfl_announce_url="${wfl_rel_base_url}/${wfl_announce_url}"
wfl_sha256sums_url="${wfl_rel_base_url}/${wfl_sha256sums_basename}"

    wfl_git archive --prefix="$wfl_src_archive_prefix" "$wfl_rel_tag" |
    xz > "$wfl_src_tar_xz_path"

    wfl_gpg --armor --detach-sign "$wfl_src_tar_xz_path"

    (
        cd "$arg_out_dir"
        sha256sum "$wfl_src_tar_xz_basename" > "$wfl_sha256sums_basename"
    )

    truncate -s0 "$wfl_rel_email_path"
    wfl_print_email_header >> "$wfl_rel_email_path"

}

function wfl_print_release_email_header {
    printf 'From: %s\n' "$arg_from"
    printf 'To: waffle@lists.freedesktop.org\n'
    if [[ ${#arg_cc[@]} -gt 0 ]]; then
        printf 'Cc: %s\n' "${arg_cc[@]}"
    fi
    printf 'Subject: [ANNOUNCE] Waffle %s\n' "$wfl_rel_version"
    printf '\n'
}

function wfl_print_email_release_file_boilerplate {
    printf 'A release candidate Waffle %s is now available for testing' "$wfl_rel_version"
    printf

}

function wfl_print_email_body {
    sed < "$wfl_rel_notes_path" \
        -e 
    wfl_gpg --clearsign < "$wfl_rel_notes_path" |
}

function wfl_make_email {
    awk -f <(wfl_email_awk_prog)
    #    BEGIN {
    #        print \"From: $arg_from\";
    #        print \"To: waffle@lists.freedesktop.org\";
    #        $(
    #            if [[ ${#arg_cc[@]} -ne 0 ]]; then
    #                printf 'print "Cc: %s";\n' "${arg_cc[@]}"
    #            fi
    #        )
    #    }
    #"
    ##printf 'From: %s\n' "$arg_from"
    ##printf 'To: waffle@lists.freedesktop.org\n'
    ##if [[ ${#arg_cc[@]} -ne 0 ]]; then
    ##    printf 'Cc: %s\n' "${arg_cc[@]}"
    ##fi

    ##printf '\n'

    ##sed --regexp-extended --e "
    #    s/^\s*(TODO(sha256sum)  $wfl_tarball_basename$/


    #gpg "${arg_gpg_opt[@]}" --clearsign < "$wfl_rel_notes_path"
}

# Git info
wfl_git_dir="$(git rev-parse --git-dir)"
wfl_git_work_tree="$(wfl_git rev-parse --show-toplevel)"
wfl_git_user_name="$(wfl_git config user.name)" || unset wfl_git_user_name
wfl_git_user_email="$(wfl_git config user.email)" || unset wfl_git_user_email

parse_args "$@"

# Release strings
wfl_rel_tag="$arg_tag"
wfl_rel_version="${wfl_rel_tag#v}"
wfl_rel_version_stable_part="${wfl_rel_version%-*}"
wfl_rel_name="waffle-${wfl_rel_version}"
wfl_rel_notes_path="$wfl_git_work_tree/doc/release-notes/waffle-${wfl_rel_version_stable_part}.txt"

# Release files
wfl_src_tar_basename="${wfl_rel_name}.tar"
wfl_src_tar_xz_basename="${wfl_src_tar_basename}.xz"
wfl_src_tar_sign_basename="${wfl_src_tar_basename}.asc"
wfl_sha256sums_basename="${wfl_rel_name}.sha256sums"
wfl_rel_email_basename="${wfl_rel_name}.eml"

# Release urls
wfl_rel_base_url="http://www.waffle-gl.org/files/release/${wfl_rel_name}"
wfl_src_tar_xz_url="${wfl_rel_base_url}/${wfl_src_tar_xz_basename}"
wfl_src_tar_sign_url="${wfl_rel_base_url}/${wfl_src_tar_sign_basename}"
wfl_rel_email_url="${wfl_rel_base_url}/${wfl_rel_email_basename}"
wfl_sha256sums_url="${wfl_rel_base_url}/${wfl_sha256sums_basename}"

wfl_make_rel_files

wfl_rc_release_email_templ="\
A release candidate Waffle $wfl_rel_version is now available for testing.

The tarballs and other release files are found at

    $wfl_src_tar_xz_url  SHA-256 $wfl_src_tar_xz_sha256
    $wfl_src_tar_sign_url
    $wfl_sha256sums_url

The signed git tag '$wfl_rel_tag' is published in 

    git://github.com/waffle-gl/waffle

Commit history for this release can be viewed at

    https://github.com/waffle-gl/waffle/commits/refs/tags/$wfl_rel_tag

Please file bugs and other issues at

    https://github.com/waffle-gl/waffle/issues

You can track the release status at

    https://github.com/waffle-gl/waffle/milestones
"
